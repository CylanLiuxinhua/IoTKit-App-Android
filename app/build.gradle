apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'


def releaseTime() {
    return new Date().format("yyyyMMddHHmm")
}

def getPackageName() {
    return "JiafeigouPlayer"
}
//腾讯mtakey
def getMtaAppKey(String variantName) {
    if (variantName.equals("zhongxing"))
        return "ATQ1JV694AKT"
    return "Aqc1103156296"
}
//从version.properties中读取versionName
def getCustomVersionName() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('version.properties')
    if (localProperties.exists())
        properties.load(localProperties.newDataInputStream())
    return properties.getProperty('versionName')
}

//从version.properties中读取versionCode
def int getCustomVersionCode() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('version.properties')
    if (localProperties.exists())
        properties.load(localProperties.newDataInputStream())
    def versionCode = properties.getProperty('versionCode').toInteger()
    return versionCode
}

def boolean getReleaseCondition(String variantName) {
    return variantName.equals("_yunRelease") || variantName.equals("_zhongxingRelease")
}

def getVariantShortName(String name) {
    return name.replace("Release", "").replace("_", "-").replace("Debug", "")
}

def boolean hasSignKey() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('local.properties')
    if (localProperties.exists()) {
        properties.load(localProperties.newDataInputStream())
        def store_file = properties.getProperty('store_file')
        return store_file != null
    }
    return false
}
//目前只有中性release版，包名
def getPackageSuffix(String variantName) {
    if (variantName.contains("zhongxing"))
        return "zhongxing"
    return ""
}


android {
    def vCode = getCustomVersionCode()
    def vName = getCustomVersionName()


    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.cylan.jiafeigou"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        manifestPlaceholders = [NICELY_VALUE: "test.jfgou.com:446",
                                MAT_VALUE   : getMtaAppKey("test")]
        customVersionCode
        versionName "1.0"
        multiDexEnabled true
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'x86'//, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode = true
//        incremental true
        javaMaxHeapSize "4g"
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        debug {

        }
        release {
            Properties properties = new Properties()
            File localProperties = project.rootProject.file('local.properties')
            if (localProperties.exists()) {
                properties.load(localProperties.newDataInputStream())
                def store_file = properties.getProperty('store_file')
                if (store_file != null) {
                    def store_pwd = properties.getProperty('store_pwd')
                    def store_alias = properties.getProperty('store_alias')
                    def store_alias_pwd = properties.getProperty('store_alias_pwd')
                    storeFile = file(store_file)
                    storePassword = store_pwd
                    keyAlias = store_alias
                    keyPassword = store_alias_pwd
                }
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
            applicationVariants.all { variant ->
                //调整包名
                applicationIdSuffix = getPackageSuffix(variant.name)
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def shortName = getVariantShortName(variant.name)
                        def fileName = "${getPackageName()}" +
                                "-${vName}" +
                                ".${vCode}" +
                                "-${releaseTime()}" +
                                shortName
                        if (outputFile.name.contains("debug")) {
                            fileName = fileName +
                                    "-debug.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                        println("hunt...name: " + outputFile.name)
                    }
                }
            }
        }
        release {
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (hasSignKey())
                signingConfig signingConfigs.release
            else signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                //调整包名
                applicationIdSuffix = getPackageSuffix(variant.name)
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def shortName = getVariantShortName(variant.name)
                        def fileName = "${getPackageName()}" +
                                "-${vName}" +
                                ".${vCode}" +
                                "-${releaseTime()}" +
                                shortName
                        //需要release包的variant
                        boolean condition = getReleaseCondition(variant.name)
                        if (outputFile.name.contains("release") && condition) {
                            fileName = fileName +
                                    "-release.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }

                    }
                }
            }
        }
    }

//    productFlavors {
////
//        _test {
//            manifestPlaceholders = [NICELY_VALUE: "test.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("test")]
//        }
//        _test1 {
//            manifestPlaceholders = [NICELY_VALUE: "test1.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("test1")]
//        }
//        _yun {
//            manifestPlaceholders = [NICELY_VALUE: "yun.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("yun")]
//        }
//        _yun1 {
//            manifestPlaceholders = [NICELY_VALUE: "yun1.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("yun1")]
//        }
//        _yf {
//            manifestPlaceholders = [NICELY_VALUE: "yf.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("yf")]
//        }
//        //中性包
//        _zhongxing {
//            applicationIdSuffix ".zhongxing"
//            manifestPlaceholders = [NICELY_VALUE: "yun.jfgou.com:446",
//                                    MAT_VALUE   : getMtaAppKey("zhongxing")]
//        }
//    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    //////////////test///////////////////////
//    testCompile rootProject.ext.testRobolectric
//    testCompile rootProject.ext.testAssertj
//    testCompile rootProject.ext.testJunit4
//    testCompile rootProject.ext.annotation
//    testCompile rootProject.ext.testMockio
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
//    androidTestCompile(rootProject.ext.testEspresso, {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })

    /////////////////android///////////////////////
    compile rootProject.ext.appcompat
    compile rootProject.ext.appSupport
    compile rootProject.ext.recyclerView
    compile rootProject.ext.appDesign
    compile rootProject.ext.appCardview
    /////////////////android///////////////////////


    compile rootProject.ext.butterknife
    apt rootProject.ext.butterknifeApt

    compile rootProject.ext.rxAndroid
    compile rootProject.ext.permis

    compile rootProject.ext.systembartint
    apt rootProject.ext.permisApt
    compile project(':jlib')
    compile files('libs/aliyun-oss-sdk-android-2.2.0.jar')
    compile files('libs/gson-2.2.4.jar')
    compile files('libs/mid-sdk-2.3.jar')
    compile files('libs/mta-android-stat-sdk-2.2.0.jar')
    compile files('libs/nineoldandroids-2.4.0.jar')
    compile files('libs/okhttp-3.2.0.jar')
    compile files('libs/okio-1.6.0.jar')
    compile files('libs/open_sdk_r5509_lite.jar')
    compile files('libs/weibosdkcore.jar')
    compile files('libs/zxing.jar')
    debugCompile files('src/main/jniLibs/jfg-debug-support.jar')
    releaseCompile files('src/main/jniLibs/jfg-release-support.jar')

    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.1.5
    compile rootProject.ext.buglySdk
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    compile rootProject.ext.buglyNdk

    debugCompile rootProject.ext.leakcanaryAndroid
    releaseCompile rootProject.ext.leakcanaryAndroidNoOp
    testCompile rootProject.ext.leakcanaryAndroidNoOp
    compile files('src/main/jniLibs/zbar.jar')
    //add by hunt 2016-08-01
    compile rootProject.ext.switchButton
    //多进程文件共享方案
    compile rootProject.ext.multiProcessSp
    //glide
    compile rootProject.ext.glide
    //头像更改选择框架
    compile rootProject.ext.galleryFinal
    compile(name: 'JfgAndroidSDK-3.0.114', ext: 'aar')
}

if (project.hasProperty('keystoreFile') &&
        project.hasProperty('keystorePassword') &&
        project.hasProperty('keystoreAliasPassword')) {
    android.signingConfigs.release.storeFile = file(keystoreFile)
    android.signingConfigs.release.storePassword = keystorePassword
    android.signingConfigs.release.keyPassword = keystoreAliasPassword
    android.signingConfigs.release.keyAlias = keystoreAlias
} else {
    android.buildTypes.release.signingConfig = null
}


if (project.hasProperty('oem')
        && oem != 'cylan') {
    android.defaultConfig.applicationId = 'com.cylan.jiafeigou.' + oem
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.processManifest.doLast {
            def manifestOutFile = output.processManifest.manifestOutputFile
            def appkey
            // cylan matappkey:Aqc1103156296  zhongxing matappkey:ATQ1JV694AKT
            if (project.hasProperty('oem') && oem != 'cylan') {
                appkey = "ATQ1JV694AKT"
            } else {
                appkey = "Aqc1103156296"
            }

            def newFileContents = manifestOutFile.getText('UTF-8').replace("MATAPPKEY", appkey)
            manifestOutFile.write(newFileContents, 'UTF-8')

        }
    }
}
