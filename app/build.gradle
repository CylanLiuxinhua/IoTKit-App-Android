apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def releaseTime() {
    return new Date().format("yyyyMMddHHmm")
}

def getPackageName() {
    return "JiafeigouPlayer"
}
//腾讯mtakey
def getMtaAppKey(String variantName) {
    if (variantName.equals("zhongxing"))
        return "ATQ1JV694AKT"
    return "Aqc1103156296"
}
//从version.properties中读取versionName
def getCustomVersionName() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('version.properties')
    if (localProperties.exists())
        properties.load(localProperties.newDataInputStream())
    return properties.getProperty('versionName')
}

//从version.properties中读取versionCode
def int getCustomVersionCode() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('version.properties')
    if (localProperties.exists())
        properties.load(localProperties.newDataInputStream())
    def versionCode = properties.getProperty('versionCode').toInteger()
    return versionCode
}

def boolean getReleaseCondition(String variantName) {
    return variantName.equals("_yunRelease") || variantName.equals("_zhongxingRelease")
}

def getVariantShortName(String name) {
    return name.replace("Release", "").replace("_", "-").replace("Debug", "")
}

def boolean hasSignKey() {
    Properties properties = new Properties()
    File localProperties = project.rootProject.file('local.properties')
    if (localProperties.exists()) {
        properties.load(localProperties.newDataInputStream())
        def store_file = properties.getProperty('store_file')
        return store_file != null
    }
    return false
}
//目前只有中性release版，包名
def getPackageSuffix(String variantName) {
    if (variantName.contains("zhongxing"))
        return "zhongxing"
    return ""
}


android {
    def vCode = getCustomVersionCode()
    def vName = getCustomVersionName()
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.cylan.jiafeigou"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        manifestPlaceholders = [NICELY_VALUE       : "yun.jfgou.com:443",
                                MAT_VALUE          : getMtaAppKey("yun"),
                                AUTHORITY          : "com.cylan.jiafeigou",
                                QQ_APP_KEY         : "1103156296",
                                weChat_APP_ID      : "wx3081bcdae8a842cf",
                                VKEY               : "tVN2fxGbUn6Hw1FNq9TFWJdQ4ClqH4Hb",
                                VID                : "0001",
                                NICELY_SINA_APP_KEY: "1315129656"]
        customVersionCode
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'x86'//, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode = true
//        incremental true
        javaMaxHeapSize "4g"
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        debug {

        }
        release {
            Properties properties = new Properties()
            File localProperties = project.rootProject.file('local.properties')
            if (localProperties.exists()) {
                properties.load(localProperties.newDataInputStream())
                def store_file = properties.getProperty('store_file')
                if (store_file != null) {
                    def store_pwd = properties.getProperty('store_pwd')
                    def store_alias = properties.getProperty('store_alias')
                    def store_alias_pwd = properties.getProperty('store_alias_pwd')
                    storeFile file(store_file)
                    storePassword store_pwd
                    keyAlias store_alias
                    keyPassword store_alias_pwd
                }
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug

            applicationVariants.all { variant ->
                //调整包名
                applicationIdSuffix = getPackageSuffix(variant.name)
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def shortName = getVariantShortName(variant.name)
                        def fileName = "${getPackageName()}" +
                                "-${vName}" +
                                ".${vCode}" +
//                                "-${releaseTime()}" +
                                shortName
                        if (outputFile.name.contains("debug")) {
                            fileName = fileName +
                                    "-debug.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                        println("hunt...name: " + outputFile.name)
                    }
                }
            }
        }
        release {
            if (hasSignKey()) {
                shrinkResources true
                minifyEnabled true
                zipAlignEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
                applicationVariants.all { variant ->
                    //调整包名
                    applicationIdSuffix = getPackageSuffix(variant.name)
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def shortName = getVariantShortName(variant.name)
                            def fileName = "${getPackageName()}" +
                                    "-${vName}" +
                                    ".${vCode}" +
                                    "-${releaseTime()}" +
                                    shortName
                            //需要release包的variant
//                        boolean condition = getReleaseCondition(variant.name)
                            if (outputFile.name.contains("release")) {
                                fileName = fileName +
                                        "-release.apk"
                                output.outputFile = new File(outputFile.parent, fileName)
                            }

                        }
                    }
                }
            }
        }
    }


    productFlavors {
        _test {
            applicationIdSuffix ".test"
            manifestPlaceholders = [NICELY_VALUE       : "test.jfgou.com:443",
                                    MAT_VALUE          : getMtaAppKey("test"),
                                    AUTHORITY          : ".test",
                                    QQ_APP_KEY         : "xxx",
                                    weChat_APP_ID      : "xxx",
                                    VKEY               : "tVN2fxGbUn6Hw1FNq9TFWJdQ4ClqH4Hb",
                                    VID                : "0001",
                                    NICELY_SINA_APP_KEY: "xxx"]
        }

        _yun {
            //官方运营
            manifestPlaceholders = [NICELY_VALUE       : "yun.jfgou.com:443",
                                    MAT_VALUE          : getMtaAppKey("yun"),
                                    AUTHORITY          : "",
                                    QQ_APP_KEY         : "1103156296",
                                    weChat_APP_ID      : "wx3081bcdae8a842cf",
                                    VKEY               : "Cd6DEgRvX92xAXRIkUexWDPxzTwKqHK3",
                                    VID                : "0001",
                                    NICELY_SINA_APP_KEY: "1315129656"]
        }
        _yf {
            applicationIdSuffix ".yf"
            manifestPlaceholders = [NICELY_VALUE       : "yf.jfgou.com:443",
                                    MAT_VALUE          : getMtaAppKey("yf"),
                                    AUTHORITY          : ".yf",
                                    VKEY               : "sXQHsCIxIOmOEX7k0nBxf0FNbbetSVRK",
                                    VID                : "0001",
                                    QQ_APP_KEY         : "xxx",
                                    weChat_APP_ID      : "xxx",
                                    NICELY_SINA_APP_KEY: "xxx"]
        }
        //中性包
        _zhongxing {
            applicationIdSuffix ".zhongxing"
            manifestPlaceholders = [NICELY_VALUE       : "yun.jfgou.com:443",
                                    MAT_VALUE          : getMtaAppKey("zhongxing"),
                                    AUTHORITY          : ".zhongxing",
                                    QQ_APP_KEY         : "xxx",
                                    weChat_APP_ID      : "wx382033a16e5cc4a5",
                                    VKEY               : "Cd6DEgRvX92xAXRIkUexWDPxzTwKqHK3",
                                    VID                : "0001",
                                    NICELY_SINA_APP_KEY: "xxx"]
        }
    }
}


repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //////////////test///////////////////////
    //testCompile和androidTestCompile的区别在于，测试文件所在的目录。
    //前者在test/，后者在androidTest
    testCompile rootProject.ext.testRobolectric
    testCompile rootProject.ext.testAssertj
    testCompile rootProject.ext.testJunit4
    testCompile rootProject.ext.annotation
    testCompile rootProject.ext.testMockio
    androidTestCompile rootProject.ext.testRules
    androidTestCompile rootProject.ext.testRunner
    //强制使用高版本，引用rootProject.ext.annotation，无效
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile(rootProject.ext.testEspresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    /////////////////android///////////////////////
    compile rootProject.ext.appcompat
    compile rootProject.ext.appSupport
    compile rootProject.ext.recyclerView
    compile rootProject.ext.appDesign
    compile rootProject.ext.appCardview
    /////////////////android///////////////////////
    compile rootProject.ext.butterknife
    apt rootProject.ext.butterknifeApt
    compile rootProject.ext.rxAndroid
    compile rootProject.ext.permis
    apt rootProject.ext.permisApt
    compile project(':jlib')
    compile files('libs/aliyun-oss-sdk-android-2.2.0.jar')
    compile files('libs/gson-2.2.4.jar')
    compile files('libs/mid-sdk-2.3.jar')
    compile files('libs/mta-android-stat-sdk-2.2.0.jar')
    compile files('libs/nineoldandroids-2.4.0.jar')
    compile files('libs/okhttp-3.2.0.jar')
    compile files('libs/okio-1.6.0.jar')
    compile files('libs/open_sdk_r5756.jar')
    compile files('libs/weiboSDKCore_3.1.4.jar')
    compile files('libs/zxing.jar')
    debugCompile files('src/main/jniLibs/jfg-debug-support.jar')
    releaseCompile files('src/main/jniLibs/jfg-release-support.jar')
    compile files('libs/libammsdk-3.1.1.jar')
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.1.5
    compile rootProject.ext.buglySdk
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    compile rootProject.ext.buglyNdk
    debugCompile rootProject.ext.leakcanaryAndroid
    releaseCompile rootProject.ext.leakcanaryAndroidNoOp
    testCompile rootProject.ext.leakcanaryAndroidNoOp
    compile files('src/main/jniLibs/zbar.jar')
    //add by hunt 2016-08-01
    compile rootProject.ext.switchButton
    //多进程文件共享方案
    //    compile rootProject.ext.multiProcessSp
    //glide
    compile rootProject.ext.glide
    compile(name: rootProject.ext.cySdk, ext: 'aar')
    //自己写的 apt
    compile project(':annotation')

    compile 'com.danikula:videocache:2.6.4'
    compile 'tv.danmaku.ijk.media:ijkplayer-java:0.7.5'
    compile 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.7.5'
    compile 'tv.danmaku.ijk.media:ijkplayer-exo:0.7.5'
}

